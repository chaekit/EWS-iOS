require 'pathname'
require 'tmpdir'

module EWSTestSuite
  UI_SPECS_TARGET_NAME = "EWSTestSuite"
  CONFIGURATION = "Release"

  PROJECT_ROOT = Pathname.new(File.dirname(__FILE__)).parent.to_s
  BUILD_DIR = File.join(PROJECT_ROOT, "build")

  class << self
    def in_project_dir
      original_dir = Dir.pwd
      Dir.chdir(PROJECT_ROOT)

      yield

      ensure
      Dir.chdir(original_dir)
    end

    def deployment_target_sdk_version
      in_project_dir do
        `xcodebuild -showBuildSettings -target #{UI_SPECS_TARGET_NAME} | grep IPHONEOS_DEPLOYMENT_TARGET | awk '{print $3 }'`.strip
      end
    end

    def deployment_target_sdk_dir
      @sdk_dir ||= "#{xcode_developer_dir}/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator#{deployment_target_sdk_version}.sdk"
    end

    # Xcode 4.3 stores its /Developer inside /Applications/Xcode.app, Xcode 4.2 stored it in /Developer
    def xcode_developer_dir
      `xcode-select -print-path`.strip
    end

    def build_dir(effective_platform_name)
      File.join(BUILD_DIR, CONFIGURATION + effective_platform_name)
    end

    def system_or_exit(cmd, stdout = nil)
      puts "Executing #{cmd}"
      cmd += " >#{stdout}" if stdout
      system(cmd) or raise "******** Build failed ********"
    end

    def with_env_vars(env_vars)
      old_values = {}
      env_vars.each do |key,new_value|
        old_values[key] = ENV[key]
        ENV[key] = new_value
      end

      yield

      env_vars.each_key do |key|
        ENV[key] = old_values[key]
      end
    end

    def output_file(target)
      output_dir = if ENV['IS_CI_BOX']
        ENV['CC_BUILD_ARTIFACTS']
      else
        Dir.mkdir(BUILD_DIR) unless File.exists?(BUILD_DIR)
        BUILD_DIR
      end

      output_file = File.join(output_dir, "#{target}.output")
      puts "Output: #{output_file}"
      output_file
    end

    def kill_simulator
      system %Q[killall -m -KILL "gdb"]
      system %Q[killall -m -KILL "otest"]
      system %Q[killall -m -KILL "iPhone Simulator"]
    end
  end
end

desc "Clean build directory"
task :clean_EWSTestSuite do
  EWSTestSuite.system_or_exit "rm -rf #{EWSTestSuite::BUILD_DIR}/*", EWSTestSuite.output_file("clean")
end

desc "Build EWSTestSuite"
task :build_EWSTestSuite => :clean_EWSTestSuite do
  EWSTestSuite.kill_simulator
  EWSTestSuite.system_or_exit "pushd #{EWSTestSuite::PROJECT_ROOT} && xcodebuild -target #{EWSTestSuite::UI_SPECS_TARGET_NAME} -configuration #{EWSTestSuite::CONFIGURATION} -sdk iphonesimulator build && popd", EWSTestSuite.output_file("EWSTestSuite")
end

desc "Run EWSTestSuite"
task :EWSTestSuite => :build_EWSTestSuite do
  env_vars = {
    "DYLD_ROOT_PATH" => EWSTestSuite.deployment_target_sdk_dir,
    "IPHONE_SIMULATOR_ROOT" => EWSTestSuite.deployment_target_sdk_dir,
    "CFFIXED_USER_HOME" => Dir.tmpdir,
    "CEDAR_HEADLESS_SPECS" => "1",
    "CEDAR_REPORTER_CLASS" => "CDRColorizedReporter"
  }

  app_path = File.join(EWSTestSuite.build_dir("-iphonesimulator"), "#{EWSTestSuite::UI_SPECS_TARGET_NAME}.app")

  EWSTestSuite.with_env_vars(env_vars) do
    EWSTestSuite.system_or_exit "#{File.join(EWSTestSuite.build_dir("-iphonesimulator"), "#{EWSTestSuite::UI_SPECS_TARGET_NAME}.app", EWSTestSuite::UI_SPECS_TARGET_NAME)} -RegisterForSystemEvents";
  end
end

