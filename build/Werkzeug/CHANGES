Werkzeug Changelog
==================

Version 0.8.3
-------------

(bugfix release, released on February 5th 2012)

- Fixed another issue with :func:`werkzeug.wsgi.make_line_iter`
  where lines longer than the buffer size were not handled
  properly.
- Restore stdout after debug console finished executing so
  that the debugger can be used on GAE better.
- Fixed a bug with the redis cache for int subclasses
  (affects bool caching).
- Fixed an XSS problem with redirect targets coming from
  untrusted sources.

Version 0.8.2
-------------

(bugfix release, released on December 16th 2011)

- Fixed a problem with request handling of the builtin server
  not repsonding to socket errors properly.
- The routing request redirect exception's code attribute is now
  used properly.
- Fixed a bug with shutdowns on Windows.
- Fixed a few unicode issues with non-ascii characters being
  hardcoded in URL rules.
- Fixed two property docstrings being assigned to fdel instead
  of ``__doc__``.
- Fixed an issue where CRLF line endings could be split into two
  by the line iter function, causing problems with multipart file
  uploads.

Version 0.8.1
-------------

(bugfix release, released on September 30th 2011)

- Fixed an issue with the memcache not working properly.
- Fixed an issue for Python 2.7.1 and higher that broke
  copying of multidicts with :func:`copy.copy`.
- Changed hashing methodology of immutable ordered multi dicts
  for a potential problem with alternative Python implementations.

Version 0.8
-----------

Released on September 29th 2011, codename Lötkolben

- Removed data structure specific KeyErrors for a general
  purpose :exc:`~werkzeug.exceptions.BadRequestKeyError`.
- Documented :meth:`werkzeug.wrappers.BaseRequest._load_form_data`.
- The routing system now also accepts strings instead of
  dictionaries for the `query_args` parameter since we're only
  passing them through for redirects.
- Werkzeug now automatically sets the content length immediately when
  the :attr:`~werkzeug.wrappers.BaseResponse.data` attribute is set
  for efficiency and simplicity reasons.
- The routing system will now normalize server names to lowercase.
- The routing system will no longer raise ValueErrors in case the
  configuration for the server name was incorrect.  This should make
  deployment much easier because you can ignore that factor now.
- Fixed a bug with parsing HTTP digest headers.  It rejected headers
  with missing nc and nonce params.
- Proxy fix now also updates wsgi.url_scheme based on X-Forwarded-Proto.
- Added support for key prefixes to the redis cache.
- Added the ability to supress some auto corrections in the wrappers
  that are now controlled via `autocorrect_location_header` and
  `automatically_set_content_length` on the response objects.
- Werkzeug now uses a new method to check that the length of incoming
  data is complete and will raise IO errors by itself if the server
  fails to do so.
- :func:`~werkzeug.wsgi.make_line_iter` now requires a limit that is
  not higher than the length the stream can provide.
- Refactored form parsing into a form parser class that makes it possible
  to hook into individual parts of the parsing process for debugging and
  extending.
- For conditional responses the content length is no longer set when it
  is already there and added if missing.
- Immutable datastructures are hashable now.
- Headers datastructure no longer allows newlines in values to avoid
  header injection attacks.
- Made it possible through subclassing to select a different remote
  addr in the proxy fix.
- Added stream based URL decoding.  This reduces memory usage on large
  transmitted form data that is URL decoded since Werkzeug will no longer
  load all the unparsed data into memory.
- Memcache client now no longer uses the buggy cmemcache module and
  supports pylibmc.  GAE is not tried automatically and the dedicated
  class is no longer necessary.
- Redis cache now properly serializes data.
- Removed support for Python 2.4

Version 0.7.2
-------------

(bugfix release, released on September 30th 2011)

- Fixed a CSRF problem with the debugger.
- The debugger is now generating private pastes on lodgeit.
- If URL maps are now bound to environments the query arguments
  are properly decoded from it for redirects.

Version 0.7.1
-------------

(bugfix release, released on July 26th 2011)

- Fixed a problem with newer versions of IPython.
- Disabled pyinotify based reloader which does not work reliably.

Version 0.7
-----------

Released on July 24th 2011, codename Schraubschlüssel

- Add support for python-libmemcached to the Werkzeug cache abstraction
  layer.
- Improved :func:`url_decode` and :func:`url_encode` performance.
- Fixed an issue where the SharedDataMiddleware could cause an
  internal server error on weird paths when loading via pkg_resources.
- Fixed an URL generation bug that caused URLs to be invalid if a
  generated component contains a colon.
- :func:`werkzeug.import_string` now works with partially set up
  packages properly.
- Disabled automatic socket swiching for IPv6 on the development
  server due to problems it caused.
- Werkzeug no longer overrides the Date header when creating a
  conditional HTTP response.
- The routing system provides a method to retrieve the matching
  methods for a given path.
- The routing system now accepts a parameter to change the encoding
  error behaviour.
- The local manager can now accept custom ident functions in the
  constructor that are forwarded to the wrapped local objects.
- url_unquote_plus now accepts unicode strings again.
- Fixed an issue with the filesystem session support's prune
  function and concurrent usage.
- Fixed a problem with external URL generation discarding the port.
- Added support for pylibmc to the Werkzeug cache abstraction layer.
- Fixed an issue with the new multipart parser that happened when
  a linebreak happend to be on the chunk limit.
- Cookies are now set properly if ports are in use.  A runtime error
  is raised if one tries to set a cookie for a domain without a dot.
- Fixed an issue with Template.from_file not working for file
  descriptors.
- Reloader can now use inotify to track reloads.  This requires the
  pyinotify library to be installed.
- Werkzeug debugger can now submit to custom lodgeit installations.
- redirect function's status code assertion now allows 201 to be used
  as redirection code.  While it's not a real redirect, it shares
  enough with redirects for the function to still be useful.
- Fixed securecookie for pypy.
- Fixed `ValueErrors` being raised on calls to `best_match` on
  `MIMEAccept` objects when invalid user data was supplied.
- Deprecated `werkzeug.contrib.kickstart` and `werkzeug.contrib.testtools`
- URL routing now can be passed the URL arguments to keep them for
  redirects.  In the future matching on URL arguments might also be
  possible.
- Header encoding changed from utf-8 to latin1 to support a port to
  Python 3.  Bytestrings passed to the object stay untouched which
  makes it possible to have utf-8 cookies.  This is a part where
  the Python 3 version will later change in that it will always
  operate on latin1 values.
- Fixed a bug in the form parser that caused the last character to
  be dropped off if certain values in multipart data is used.
- Multipart parser now looks at the part-individual content type
  header to override the global charset.
- Introduced mimetype and mimetype_params attribute for the file
  storage object.
- Changed FileStorage filename fallback logic to skip special filenames
  that Python uses for marking special files like stdin.
- Introduced more HTTP exception classes.
- `call_on_close` now can be used as a decorator.
- Support for redis as cache backend.
- Added `BaseRequest.scheme`.
- Support for the RFC 5789 PATCH method.
- New custom routing parser and better ordering.
- Removed support for `is_behind_proxy`.  Use a WSGI middleware
  instead that rewrites the `REMOTE_ADDR` according to your setup.
  Also see the :class:`werkzeug.contrib.fixers.ProxyFix` for
  a drop-in replacement.
- Added cookie forging support to the test client.
- Added support for host based matching in the routing system.
- Switched from the default 'ignore' to the better 'replace'
  unicode error handling mode.
- The builtin server now adds a function named 'werkzeug.server.shutdown'
  into the WSGI env to initiate a shutdown.  This currently only works
  in Python 2.6 and later.
- Headers are now assumed to be latin1 for better compatibility with
  Python 3 once we have support.
- Added :func:`werkzeug.security.safe_join`.
- Added `accept_json` property analogous to `accept_html` on the
  :class:`werkzeug.datastructures.MIMEAccept`.
- :func:`werkzeug.utils.import_string` now fails with much better
  error messages that pinpoint to the problem.
- Added support for parsing of the `If-Range` header
  (:func:`werkzeug.http.parse_if_range_header` and
  :class:`werkzeug.datastructures.IfRange`).
- Added support for parsing of the `Range` header
  (:func:`werkzeug.http.parse_range_header` and
  :class:`werkzeug.datastructures.Range`).
- Added support for parsing of the `Content-Range` header of respones
  and provided an accessor object for it
  (:func:`werkzeug.http.parse_content_range_header` and
  :class:`werkzeug.datastructures.ContentRange`).

Version 0.6.2
-------------

(bugfix release, released on April 23th 2010)

- renamed the attribute `implicit_seqence_conversion` attribute of the
  request object to `implicit_sequence_conversion`.

Version 0.6.1
-------------

(bugfix release, released on April 13th 2010)

- heavily improved local objects.  Should pick up standalone greenlet
  builds now and support proxies to free callables as well.  There is
  also a stacked local now that makes it possible to invoke the same
  application from within itself by pushing current request/response
  on top of the stack.
- routing build method will also build non-default method rules properly
  if no method is provided.
- added proper IPv6 support for the builtin server.
- windows specific filesystem session store fixes.
  (should no be more stable under high concurrency)
- fixed a `NameError` in the session system.
- fixed a bug with empty arguments in the werkzeug.script system.
- fixed a bug where log lines will be duplicated if an application uses
  :meth:`logging.basicConfig` (#499)
- added secure password hashing and checking functions.
- `HEAD` is now implicitly added as method in the routing system if
  `GET` is present.  Not doing that was considered a bug because often
  code assumed that this is the case and in web servers that do not
  normalize `HEAD` to `GET` this could break `HEAD` requests.
- the script support can start SSL servers now.

Version 0.6
-----------

Released on Feb 19th 2010, codename Hammer.

- removed pending deprecations
- sys.path is now printed from the testapp.
- fixed an RFC 2068 incompatibility with cookie value quoting.
- the :class:`FileStorage` now gives access to the multipart headers.
- `cached_property.writeable` has been deprecated.
- :meth:`MapAdapter.match` now accepts a `return_rule` keyword argument
  that returns the matched `Rule` instead of just the `endpoint`
- :meth:`routing.Map.bind_to_environ` raises a more correct error message
  now if the map was bound to an invalid WSGI environment.
- added support for SSL to the builtin development server.
- Response objects are no longer modified in place when they are evaluated
  as WSGI applications.  For backwards compatibility the `fix_headers`
  function is still called in case it was overridden.
  You should however change your application to use `get_wsgi_headers` if
  you need header modifications before responses are sent as the backwards
  compatibility support will go away in future versions.
- :func:`append_slash_redirect` no longer requires the QUERY_STRING to be
  in the WSGI environment.
- added :class:`~werkzeug.contrib.wrappers.DynamicCharsetResponseMixin`
- added :class:`~werkzeug.contrib.wrappers.DynamicCharsetRequestMixin`
- added :attr:`BaseRequest.url_charset`
- request and response objects have a default `__repr__` now.
- builtin data structures can be pickled now.
- the form data parser will now look at the filename instead the
  content type to figure out if it should treat the upload as regular
  form data or file upload.  This fixes a bug with Google Chrome.
- improved performance of `make_line_iter` and the multipart parser
  for binary uploads.
- fixed :attr:`~werkzeug.BaseResponse.is_streamed`
- fixed a path quoting bug in `EnvironBuilder` that caused PATH_INFO and
  SCRIPT_NAME to end up in the environ unquoted.
- :meth:`werkzeug.BaseResponse.freeze` now sets the content length.
- for unknown HTTP methods the request stream is now always limited
  instead of being empty.  This makes it easier to implement DAV
  and other protocols on top of Werkzeug.
- added :meth:`werkzeug.MIMEAccept.best_match`
- multi-value test-client posts from a standard dictionary are now
  supported.  Previously you had to use a multi dict.
- rule templates properly work with submounts, subdomains and
  other rule factories now.
- deprecated non-silent usage of the :class:`werkzeug.LimitedStream`.
- added support for IRI handling to many parts of Werkzeug.
- development server properly logs to the werkzeug logger now.
- added :func:`werkzeug.extract_path_info`
- fixed a querystring quoting bug in :func:`url_fix`
- added `fallback_mimetype` to :class:`werkzeug.SharedDataMiddleware`.
- deprecated :meth:`BaseResponse.iter_encoded`'s charset parameter.
- added :meth:`BaseResponse.make_sequence`,
  :attr:`BaseResponse.is_sequence` and
  :meth:`BaseResponse._ensure_sequence`.
- added better __repr__ of :class:`werkzeug.Map`
- `import_string` accepts unicode strings as well now.
- development server doesn't break on double slashes after the host name.
- better `__repr__` and `__str__` of
  :exc:`werkzeug.exceptions.HTTPException`
- test client works correctly with multiple cookies now.
- the :class:`werkzeug.routing.Map` now has a class attribute with
  the default converter mapping.  This helps subclasses to override
  the converters without passing them to the constructor.
- implemented :class:`OrderedMultiDict`
- improved the session support for more efficient session storing
  on the filesystem.  Also added support for listing of sessions
  currently stored in the filesystem session store.
- werkzeug no longer utilizes the Python time module for parsing
  which means that dates in a broader range can be parsed.
- the wrappers have no class attributes that make it possible to
  swap out the dict and list types it uses.
- werkzeug debugger should work on the appengine dev server now.
- the URL builder supports dropping of unexpected arguments now.
  Previously they were always appended to the URL as query string.
- profiler now writes to the correct stream.

Version 0.5.1
-------------
(bugfix release for 0.5, released on July 9th 2009)

- fixed boolean check of :class:`FileStorage`
- url routing system properly supports unicode URL rules now.
- file upload streams no longer have to provide a truncate()
  method.
- implemented :meth:`BaseRequest._form_parsing_failed`.
- fixed #394 
- :meth:`ImmutableDict.copy`, :meth:`ImmutableMultiDict.copy` and
  :meth:`ImmutableTypeConversionDict.copy` return mutable shallow
  copies.
- fixed a bug with the `make_runserver` script action.
- :meth:`MultiDict.items` and :meth:`MutiDict.iteritems` now accept an
  argument to return a pair for each value of each key.
- the multipart parser works better with hand-crafted multipart
  requests now that have extra newlines added.  This fixes a bug
  with setuptools uploades not handled properly (#390)
- fixed some minor bugs in the atom feed generator.
- fixed a bug with client cookie header parsing being case sensitive.
- fixed a not-working deprecation warning.
- fixed package loading for :class:`SharedDataMiddleware`.
- fixed a bug in the secure cookie that made server-side expiration
  on servers with a local time that was not set to UTC impossible.
- fixed console of the interactive debugger.


Version 0.5
-----------

Released on April 24th, codename Schlagbohrer.

- requires Python 2.4 now
- fixed a bug in :class:`~contrib.IterIO`
- added :class:`MIMEAccept` and :class:`CharsetAccept` that work like the
  regular :class:`Accept` but have extra special normalization for mimetypes
  and charsets and extra convenience methods.
- switched the serving system from wsgiref to something homebrew.
- the :class:`Client` now supports cookies.
- added the :mod:`~werkzeug.contrib.fixers` module with various
  fixes for webserver bugs and hosting setup side-effects.
- added :mod:`werkzeug.contrib.wrappers`
- added :func:`is_hop_by_hop_header`
- added :func:`is_entity_header`
- added :func:`remove_hop_by_hop_headers`
- added :func:`pop_path_info`
- added :func:`peek_path_info`
- added :func:`wrap_file` and :class:`FileWrapper`
- moved `LimitedStream` from the contrib package into the regular
  werkzeug one and changed the default behavior to raise exceptions
  rather than stopping without warning.  The old class will stick in
  the module until 0.6.
- implemented experimental multipart parser that replaces the old CGI hack.
- added :func:`dump_options_header` and :func:`parse_options_header`
- added :func:`quote_header_value` and :func:`unquote_header_value`
- :func:`url_encode` and :func:`url_decode` now accept a separator
  argument to switch between `&` and `;` as pair separator.  The magic
  switch is no longer in place.
- all form data parsing functions as well as the :class:`BaseRequest`
  object have parameters (or attributes) to limit the number of
  incoming bytes (either totally or per field).
- added :class:`LanguageAccept`
- request objects are now enforced to be read only for all collections.
- added many new collection classes, refactored collections in general.
- test support was refactored, semi-undocumented `werkzeug.test.File`
  was replaced by :class:`werkzeug.FileStorage`.
- :class:`EnvironBuilder` was added and unifies the previous distinct
  :func:`create_environ`, :class:`Client` and
  :meth:`BaseRequest.from_values`.  They all work the same now which
  is less confusing.
- officially documented imports from the internal modules as undefined
  behavior.  These modules were never exposed as public interfaces.
- removed `FileStorage.__len__` which previously made the object
  falsy for browsers not sending the content length which all browsers
  do.
- :class:`SharedDataMiddleware` uses `wrap_file` now and has a
  configurable cache timeout.
- added :class:`CommonRequestDescriptorsMixin`
- added :attr:`CommonResponseDescriptorsMixin.mimetype_params`
- added :mod:`werkzeug.contrib.lint`
- added `passthrough_errors` to `run_simple`.
- added `secure_filename`
- added :func:`make_line_iter` 
- :class:`MultiDict` copies now instead of revealing internal
  lists to the caller for `getlist` and iteration functions that
  return lists.
- added :attr:`follow_redirect` to the :func:`open` of :class:`Client`.
- added support for `extra_files` in
  :func:`~werkzeug.script.make_runserver`

Version 0.4.1
-------------

(Bugfix release, released on January 11th 2009)

- `werkzeug.contrib.cache.Memcached` accepts now objects that
  implement the memcache.Client interface as alternative to a list of
  strings with server addresses.
  There is also now a `GAEMemcachedCache` that connects to the Google
  appengine cache.
- explicitly convert secret keys to bytestrings now because Python
  2.6 no longer does that.
- `url_encode` and all interfaces that call it, support ordering of
  options now which however is disabled by default.
- the development server no longer resolves the addresses of clients.
- Fixed a typo in `werkzeug.test` that broke `File`.
- `Map.bind_to_environ` uses the `Host` header now if available.
- Fixed `BaseCache.get_dict` (#345)
- `werkzeug.test.Client` can now run the application buffered in which
  case the application is properly closed automatically.
- Fixed `Headers.set` (#354).  Caused header duplication before.
- Fixed `Headers.pop` (#349).  default parameter was not properly
  handled.
- Fixed UnboundLocalError in `create_environ` (#351)
- `Headers` is more compatible with wsgiref now.
- `Template.render` accepts multidicts now.
- dropped support for Python 2.3

Version 0.4
-----------

Released on November 23rd 2008, codename Schraubenzieher.

- `Client` supports an empty `data` argument now.
- fixed a bug in `Response.application` that made it impossible to use it
  as method decorator.
- the session system should work on appengine now
- the secure cookie works properly in load balanced environments with
  different cpu architectures now.
- `CacheControl.no_cache` and `CacheControl.private` behavior changed to
  reflect the possibilities of the HTTP RFC.  Setting these attributes to
  `None` or `True` now sets the value to "the empty value".
  More details in the documentation.
- fixed `werkzeug.contrib.atom.AtomFeed.__call__`. (#338)
- `BaseResponse.make_conditional` now always returns `self`.  Previously
  it didn't for post requests and such.
- fixed a bug in boolean attribute handling of `html` and `xhtml`.
- added graceful error handling to the debugger pastebin feature.
- added a more list like interface to `Headers` (slicing and indexing
  works now)
- fixed a bug with the `__setitem__` method of `Headers` that didn't
  properly remove all keys on replacing.
- added `remove_entity_headers` which removes all entity headers from
  a list of headers (or a `Headers` object)
- the responses now automatically call `remove_entity_headers` if the
  status code is 304.
- fixed a bug with `Href` query parameter handling.  Previously the last
  item of a call to `Href` was not handled properly if it was a dict.
- headers now support a `pop` operation to better work with environ
  properties.


Version 0.3.1
-------------

(bugfix release, released on June 24th 2008)

- fixed a security problem with `werkzeug.contrib.SecureCookie`.
  More details available in the `release announcement`_.

.. _release announcement: http://lucumr.pocoo.org/cogitations/2008/06/24/werkzeug-031-released/

Version 0.3
-----------

Released on June 14th 2008, codename EUR325CAT6.

- added support for redirecting in url routing.
- added `Authorization` and `AuthorizationMixin`
- added `WWWAuthenticate` and `WWWAuthenticateMixin`
- added `parse_list_header`
- added `parse_dict_header`
- added `parse_authorization_header`
- added `parse_www_authenticate_header`
- added `_get_current_object` method to `LocalProxy` objects
- added `parse_form_data`
- `MultiDict`, `CombinedMultiDict`, `Headers`, and `EnvironHeaders` raise
  special key errors now that are subclasses of `BadRequest` so if you
  don't catch them they give meaningful HTTP responses.
- added support for alternative encoding error handling and the new
  `HTTPUnicodeError` which (if not caught) behaves like a `BadRequest`.
- added `BadRequest.wrap`.
- added ETag support to the SharedDataMiddleware and added an option
  to disable caching.
- fixed `is_xhr` on the request objects.
- fixed error handling of the url adapter's `dispatch` method. (#318)
- fixed bug with `SharedDataMiddleware`.
- fixed `Accept.values`.
- `EnvironHeaders` contain content-type and content-length now
- `url_encode` treats lists and tuples in dicts passed to it as multiple
  values for the same key so that one doesn't have to pass a `MultiDict`
  to the function.
- added `validate_arguments`
- added `BaseRequest.application`
- improved Python 2.3 support
- `run_simple` accepts `use_debugger` and `use_evalex` parameters now,
  like the `make_runserver` factory function from the script module.
- the `environ_property` is now read-only by default
- it's now possible to initialize requests as "shallow" requests which
  causes runtime errors if the request object tries to consume the
  input stream.


Version 0.2
-----------

Released Feb 14th 2008, codename Faustkeil.

- Added `AnyConverter` to the routing system.
- Added `werkzeug.contrib.securecookie`
- Exceptions have a ``get_response()`` method that return a response object
- fixed the path ordering bug (#293), thanks Thomas Johansson
- `BaseReporterStream` is now part of the werkzeug contrib module.  From
  Werkzeug 0.3 onwards you will have to import it from there.
- added `DispatcherMiddleware`.
- `RequestRedirect` is now a subclass of `HTTPException` and uses a
  301 status code instead of 302.
- `url_encode` and `url_decode` can optionally treat keys as unicode strings
  now, too.
- `werkzeug.script` has a different caller format for boolean arguments now.
- renamed `lazy_property` to `cached_property`.
- added `import_string`.
- added is_* properties to request objects.
- added `empty()` method to routing rules.
- added `werkzeug.contrib.profiler`.
- added `extends` to `Headers`.
- added `dump_cookie` and `parse_cookie`.
- added `as_tuple` to the `Client`.
- added `werkzeug.contrib.testtools`.
- added `werkzeug.unescape`
- added `BaseResponse.freeze`
- added `werkzeug.contrib.atom`
- the HTTPExceptions accept an argument `description` now which overrides the
  default description.
- the `MapAdapter` has a default for path info now.  If you use
  `bind_to_environ` you don't have to pass the path later.
- the wsgiref subclass werkzeug uses for the dev server does not use direct
  sys.stderr logging any more but a logger called "werkzeug".
- implemented `Href`.
- implemented `find_modules`
- refactored request and response objects into base objects, mixins and
  full featured subclasses that implement all mixins.
- added simple user agent parser
- werkzeug's routing raises `MethodNotAllowed` now if it matches a
  rule but for a different method.
- many fixes and small improvements


Version 0.1
-----------

Released on Dec 9th 2007, codename Wictorinoxger.

- Initial release
